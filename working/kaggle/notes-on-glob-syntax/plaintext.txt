Notes on glob syntax. glob is a UNIX-era tool that offers a simplified alternative to regex for specifying subsets of filenames and filepaths. The glob module in Python is an example of an interface to this tool, and it's what I use here. UNIX shell commands like cp use glob syntax for their arguments. * is wildcard. Wildcard on any side to match 0-n characters. Slashes / expand into the filesystem. ? matches any single character. [a-z] matches a character range. [abc] matches a list of characters. You can invert these: [!a-z] or [!abc]. You cannot make glob match variable-length: these only work a single character at a time. If you need variadic length you need to use regex. The last feature to know about is recursive glob, **. This is a Bash feature, and not a POSIX one. Recursive glob will take the place of as many subpaths as necessary. As a safety catch you need to specify recursive=True when using this in glob.glob. Another place where this appears in Python is in the pathlib module. pathlib has no guardrails on ** usage. In the shell, echo accepts glob syntax. This is how you test it when writing shell. cp is probably the glob-accepting command you use most often. In the case of a glob matching more than one file, the last argument must be a directory name. In the case of a glob matching only one file, the last argument may be a directory name or a file name, either/or. 