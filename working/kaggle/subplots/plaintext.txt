In the previous section, "Styling your plots", we set the title of a plot using a bit of matplotlib code. We did this by grabbing the underlying "axis" and then calling set_title on that. In this section we'll explore another matplotlib-based stylistic feature: subplotting. Subplotting is a technique for creating multiple plots that live side-by-side in one overall figure. We can use the subplots method to create a figure with multiple subplots. subplots takes two arguments. The first one controls the number of rows, the second one the number of columns. Since we asked for a subplots(2, 1), we got a figure with two rows and one column. Let's break this down a bit. When pandas generates a bar chart, behind the scenes here is what it actually does: In a similar way, our subplots operation above created one overall Figure with two AxesSubplots vertically nested inside of it. subplots returns two things, a figure (which we assigned to fig) and an array of the axes contained therein (which we assigned to axarr). Here are the axarr contents: To tell pandas which subplot we want a new plot to go in—the first one or the second one—we need to grab the proper axis out of the list and pass it into pandas via the ax parameter: We are of course not limited to having only a single row. We can create as many subplots as we want, in whatever configuration we need. For example: If there are multiple columns and multiple rows, as above, the axis array becoming a list of lists: That means that to plot our data from earlier, we now need a row number, then a column number. Notice that the bar plot of wines by point counts is in the first row and first column (the [0][0] position), while the bar plot of wines by origin is in the second row and second column ([1][1]). By combining subplots with the styles we learned in the last section, we can create appealing-looking panel displays. Why are subplots useful? Oftentimes as a part of the exploratory data visualization process you will find yourself creating a large number of smaller charts probing one or a few specific aspects of the data. For example, suppose we're interested in comparing the scores for relatively common wines with those for relatively rare ones. In these cases, it makes logical sense to combine the two plots we would produce into one visual "unit" for analysis and discussion. When we combine subplots with the style attributes we explored in the previous notebook, this technique allows us to create extremely attractive and informative panel displays. Finally, subplots are critically useful because they enable faceting. Faceting is the act of breaking data variables up across multiple subplots, and combining those subplots into a single figure. So instead of one bar chart, we might have, say, four, arranged together in a grid. The recommended way to perform faceting is to use the seaborn FacetGrid facility. This feature is explored in a separate section of this tutorial. Let's test ourselves by answering some questions about the plots we've used in this section. Once you have your answers, click on "Output" button below to show the correct answers. To put your design skills to the test, try forking this notebook and replicating the plots that follow. To see the answers, hit the "Input" button below to un-hide the code. (Hint: use figsize=(8, 8)) In the previous section we explored some pandas/matplotlib style parameters. In this section, we dove a little deeper still by exploring subplots. Together these two sections conclude our primer on style. Hopefully our plots will now be more legible and informative. Click here to go to the next section, "Plotting with seaborn". 