This notebook contains my notes on the Kubernetes production best practices checklist. This is a recommendable checklist providing a running tally of concerns that should be addressed when working with Kubernetes systems. This notebook can be considered a follow-up to my previous notebook Notes on Docker packaging with Python, which contains a some notes on a series of blog posts explaining best practices around the package management of Python processes within Docker images. Without further ado, let's break down the list. Containers have readiness probes Containers crash when there's a fatal error Configure a passive liveness probe Liveness probe values are not the same as readiness The readiness probe doesn't include dependencies to services such as: databases, database migrations, APIs, and third party services. The app retries connecting to dependent services. The app doesn't shut down on SIGTERM, but it gracefully terminates connections. The app still processes incoming requests in the grace period. The CMD in the Dockerfile forwards the SIGTERM to the process. Close all idle keep-alive sockets. Run more than one replica for your deployment. Avoid placing pods on the same nodes. Set pod disruption budgets Set memory limits for all containers, and consider setting CPU limits Set CPU requests limit to 1 CPU or below. Disable CPU limits, unless you have a really good use case. The namespace has a limit range. Set an appropriate Quality Of Service (QoS) for pods. TODO 