Mary Vikhreva's TSNE-versus-PCA demonstrates pretty conclusively that it's not possible to distinguish Pokemon type using Pokemon statistics alone. Even though domain knowledge tells us that there are pretty significant structural differences between Pokemon type statistic attribution (Steel gets high Defense, Psychic high Special Attack, etc.), there are far too many classes for naive classification to work. Seeing this result, I was curious as to which effect is more important to classification difficulty: the sheer number of Pokemon types total, or exceptions to the "usual pattern" of type stat allocation? If we remove the first difficulty by, say, only considering two types at a time, can we find pairs of Pokemon types that are easily distinguishable? Distinguishing between just two types of Pokemon isn't, admittedly, very practically interesting. But it tells us something interesting about the structure of Pokemon types: how tightly Pokemon are distributed against the "average" Pokemon of their type. If we dump our data out onto a parallel coordinates plot, we get what we expect—a big mess. No classifier could possibly make sense of this. Let's visualize some type pairs instead. First up, Steel versus Fairy types. Domain knowledge tells us that these should be distinguishable, and it appears that they are! Steel Pokemon in general have a much higher Defense stat than Fairy Pokemon do. Here's another promising type comparison, Psychic and Fighting. Psychic Pokemon focus on Sp. Atk while Fighting Pokemon focus on regular Attack, and neither type tends to allocate to the other. These two represent relatively distinguishable type comparisons. How about one that'd never work? Here's one. This is just a big muddle! If we look at the averages across all types, we see that a few of these types do indeed seem pretty distinct: Steel, Dragon, Flying, and Fairy types all, in aggregate, have structural features in stat allocation unique to their type. This data allows us to go the other way and check typing by stat allocation, if we are so inclined, and we are. Here's a type breakdown for Pokemon with stats matching an "average" Pokemon (Bulbasaur is in this list, for example). The top two classes cover just a quarter of cases! Meanwhile, even more troublingly, the most likely Pokemon type near the Steel allocation average is the Bug type! There are simply a lot more Bug type than Steel type Pokemon, and some of them fall into our "averagely a Steel type" window. Indeed, Pokemon types in general own very little of their average "space". The top contender is normal types, again probably mostly because that's simply the most common type in the game. Well, this is a dead end. Let's see what happens when we try to run a classifier. We will preprocess with principal components analysis to afix the variables of interest, then run a support vector machine on the result. As you in the explained variable output below, most of the variability in the data in our test case (Steel versus Fairy) is explained by two features post-PCA, so we'll drop the others and focus on those. This allows us to easily plot what we're doing—trying to draw a line seperating our two classes in two-dimensional space. Can you see where the classifier drew a line? This is a pretty good result! But again, remember that Fairy and Steel are probably the most easily co-distinguishable types in the game. Let's formalize this procedure and look at a handful of other results. This is not as great: These are disasters; the SVM simply collapses onto a single class! Let's extend this to all type pairs. First, we define a distinguishability score, which we'll set to None if the result is a failing classification like the last two above. Then we'll dump the resultant data out into a table. Let's subtract 0.5 from the result to get how-much-better-than-a-coin-flip our classifier did. Voila, a big table. That's a lot of detail. As you can see, there are many, many cases where the classifier failed to do anything at all. Here's average distinguishability by type: We've found exactly the same types we were thinking about at the beginning of this experiment—Steel, Dragon, Electric. But now we have numbers to attach to our hypothesis. Here's a few example classification schemes. In conclusion: The average Pokemon of a type is not representative of Pokemon of that type as a whole. 