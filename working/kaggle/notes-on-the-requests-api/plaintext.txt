This notebook has some notes on the requests API. It's primarily intended as a refresher. To specify URL query strings use the params kwarg. E.g.: r.content is the raw bytes, r.text is a decode attempt using a best-guess encoding (viewable/settable via r.encoding) for mimetypes that text-based. r.json() is a convenience function for converting to JSON. To stream input set stream=True and use iter_content(chunk_size=?): Note that this will uncompress gzip and deflate transer encoded data beforehand, if you need the raw compressed bytes use r.raw. HTTP headers are specified using the headers argument: For the authorization header use the auth parameter instead. See next section. r.status_code to get the status code. r.raise_for_status() to throw on a "bad" HTTP response status code. Authentication flows are documented here in the docs. HTTP Basic Authentication, the most common form, is supported as follows: Note that in the HTTP header this looks like so: Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l. More complicated authentication schemes are also supported, but for e.g. OAuth2 you'll need some side-library support, and more complex parameterization. To POST data out of a file, using multipart encoding (e.g. enctype='multipart/form-data'), use files=. The Content-Type and additional headers included in the follow code sample are optional: How do you process this kind of input on the server side? You probably don't want to; you want your server software to handle it. But here's a good answer showcasing the receipt format. Cookies can be passed using cookies: They are available in the cookies field on the response, e.g. r.cookies. 