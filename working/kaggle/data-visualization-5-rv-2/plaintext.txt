And now for something completely different. Both seaborn and pandas data visualization tools are built on top of another, lower-level graphics library called matplotlib. Anything that you build using either of these library can be built using matplotlib directly; the two libraries we've been focusing on in this tutorial merely make it easier (potentially a lot easier) to get that work done. However, a working understanding of how matplotlib works is still necessary to understand data visualization with these higher-level tools. In this section, in preparation for taking on multivariate plotting, we'll cover how matplotlib can be used to modify, style, and stack your plots. Recall our bar plot from earlier: Throughout this section we're going to work on making this plot look nicer. Let's get to it with the first major issue: this plot is kind of hard to see. So make it bigger! We can use the figsize parameter to do that. figsize controls the size of the image, in inches. It expects a tuple with (width, height) values. I find the colors matplotlib uses by default very distracting. This is ordinal categorical data with an order to it, but the divergent color scale implies that it is nominal categorical. We can tone this down using the cleverly named color parameter: The next issue I have is that the text labels are very hard to read at this size. They "fit" the plot when our plot was very small, but now that the plot is much bigger we need much bigger labels. We can used fontsize to adjust this. Better! You know what else we need? A title! However, this title is too small. Unfortunately, pandas doesn't give us an easy way of adjusting the title size. We have to go deeperâ€”we have to use matplotlib to do it! Here is the incantation you will need to use: There are only two differences here, but they're important. Notice how in the previous cell, in addition to a plot we also returned a <matplotlib.axes._subplots.AxesSubplot> object. When it generates a plot, pandas creates such a AxesSubplots objects by default. In the cell immediately above, all we've done is grabbed that object, assigned it to the variable ax, and then called set_title on ax. The ax.set_title method makes it easy to change the fontsize; the title= keyword parameter in the pandas library does not. This idea of an "axis" is one of the two fundamental concepts in matplotlib. The other fundamental concept is the figure. When pandas generates this bar chart, behind the scenes here is what it actually does: Methods like set_title on the matplotlib level can be awfully convenient, if you know they exist. However, matplotlib itself is very complicated; so much so that it's beyond the scope of this tutorial. Mainly it's important to know that they exist; we'll sample the "good parts" here. Furthermore, it's good to keep in mind that because seaborn and pandas are built using the same underlying code, it's possible to intermix the two. For example, suppose want to get rid of the ugly black border in our visualization. We can use the very convenient sns.despine method to do it! Perfect! If you scroll up to the bar chart we started with, you will hopefully see how much more attractive this fully styled bar plot is! There are many more things we can do. Some examples are: And so on. But we'll stop here. Recall that I said earlier that a matplotlib data visualization consists of two parts, an overall Figure and some number of AxesSubplots instances associated with it. In matplotlib, multiple plots can live side-by-side in one overall figure. This is known as "subplotting", and it's a powerful stylistic tool. We can use plt.subplots to create a figure with multiple subplots, like so: You can then assign plots to these subplots like so: Because seaborn is also based on matplotlib, you can even mix pandas and seaborn sub-plots into the same figure. There is one last very useful matplotlib feature that both pandas and seaborn share: the ability to overplot data. This is an extremely useful feature, and hence one worth briefly mentioning. For example, suppose that we're interested in both the cheapest price and the average price for buying a wine with a certain review score. We can get both pieces of information onto a multivariate line chart very easily: just pass a reference to the same axis around: This doesn't work for every plot type, but it's very convenient when it does! Having seen what we can do with styling and subplotting, let's now move on to some exercises. For the following exercises, try forking and running this notebook, and then reproducing the charts that follow. In this notebook we learned how to style our plots, how to use some helpful underlying matplotlib tools, how to overplot, and how to create matplotlib figures with multiple subplots. Competently styling your plots is important because it will help guide your reader towards the point that you are trying to make, but they are perhaps oft ignored by those in a rush. Subplots, meanwhile, are both very pretty and very functional. They unlock "faceting", a powerful technique that I will explore in more depth in our next notebook: multivariate visualization! To go to the next notebook click here. 